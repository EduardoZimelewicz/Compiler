import java_cup.runtime.*;

/* Terminals */
terminal Token COMMA, SEMICOLON, LEFTPAREN, RIGHTPAREN;
terminal Token MORETHAN, LESSTHAN, MINUS, PLUS, MULT, DIV, ASSIGNMENT;
terminal Token IF, ELSE, DEF, THEN;
terminal Token IDENTIFIER;
terminal Token INTEGER;

/* Nonterminals */
non terminal OpSDef opS;
non terminal OpRelDef opRel;
non terminal OpMDef opM;
non terminal PDef P;
non terminal IDef I;
non terminal Define D;
non terminal ArgsDef ARGS;
non terminal SeqDef SEQ;
non terminal EDef E;

precedence left PLUS, MINUS; 
precedence left MULT, DIV;
precedence left MORETHAN, LESSTHAN, ASSIGNMENT;
precedence left IF, ELSE, THEN;
precedence nonassoc RIGHTPAREN, LEFTPAREN;
precedence nonassoc COMMA;

start with P;

P ::= IDENTIFIER:id ASSIGNMENT INTEGER:integer SEMICOLON P:p {: RESULT = new PDef(id, integer, p); :}
| 	
	I:i {: RESULT = new PDef(i); :} 
;

I ::= D:d I:i {: RESULT = new IDef(d,i); :}  
| 
	D:d   {: RESULT = new IDef(d); :}
;

D ::= DEF:d IDENTIFIER:id LEFTPAREN:lp ARGS:args RIGHTPAREN:rp ASSIGNMENT E:e SEMICOLON {: RESULT  = new Define(d, id, lp, args, rp, e); :}
;

ARGS ::= IDENTIFIER:id COMMA:c ARGS:args {: RESULT = new ArgsDef(id,c,args); :} 
	| 
		IDENTIFIER:id {: RESULT = new ArgsDef(id); :}
	;

	
SEQ ::= E:e {: RESULT = new SeqDef(e); :}
	| 
		SEQ:s COMMA:c E:e {: RESULT = new SeqDef(s,c,e); :}
	;
	
opRel ::= LESSTHAN:l {: RESULT = new OpRelDef(l); :}
	|
		MORETHAN:m {: RESULT = new OpRelDef(m); :}
	|
		ASSIGNMENT:a {: RESULT = new OpRelDef(a); :}
	|
	
	;

opS ::= PLUS:p {: RESULT = new OpSDef(p); :}
	| 
		MINUS:m {: RESULT = new OpSDef(m); :}
	;
opM ::= MULT:m {: RESULT = new OpMDef(m); :}
	|
		DIV:d {: RESULT = new OpMDef(d); :}
	;

E ::= INTEGER:in {: RESULT = new EDef(in); :} 
| 
	IDENTIFIER:id {: RESULT = new EDef(id); :}
| 
	IF:ife E:e1 opRel:opr E:e2 THEN:th E:e3 ELSE:el E:e4 {: RESULT = new EDef(ife,e1,opr,e2,th,e3,el,e4); :} 
|
	E:e1 opS:ops E:e2 {: RESULT = new EDef(e1,ops,e2); :}
|
	E:e1 opM:opm E:e2 {: RESULT = new EDef(e1,opm,e2); :}
|
	IDENTIFIER:id LEFTPAREN:lp SEQ:seq RIGHTPAREN:rp {: RESULT = new EDef(id,lp,seq,rp); :}
;