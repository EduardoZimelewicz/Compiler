
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\004\000\002\005\007\000\002\005" +
    "\003\000\002\005\002\000\002\006\004\000\002\006\003" +
    "\000\002\007\012\000\002\010\005\000\002\010\003\000" +
    "\002\011\003\000\002\011\005\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\002\000\002\002" +
    "\003\000\002\002\003\000\002\004\003\000\002\004\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\012\000" +
    "\002\012\005\000\002\012\005\000\002\012\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\061\000\010\002\ufffe\021\005\023\006\001\002\000" +
    "\004\002\uffff\001\002\000\004\023\017\001\002\000\004" +
    "\016\013\001\002\000\004\002\012\001\002\000\006\002" +
    "\ufffc\021\005\001\002\000\004\002\ufffd\001\002\000\004" +
    "\002\001\001\002\000\004\024\014\001\002\000\004\005" +
    "\015\001\002\000\010\002\ufffe\021\005\023\006\001\002" +
    "\000\004\002\000\001\002\000\004\006\020\001\002\000" +
    "\004\023\021\001\002\000\006\004\062\007\ufff9\001\002" +
    "\000\004\007\023\001\002\000\004\016\024\001\002\000" +
    "\010\017\030\023\026\024\025\001\002\000\040\004\uffee" +
    "\005\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014" +
    "\uffee\015\uffee\016\uffee\017\uffee\020\uffee\022\uffee\023\uffee" +
    "\024\uffee\001\002\000\042\004\uffed\005\uffed\006\054\007" +
    "\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed" +
    "\016\uffed\017\uffed\020\uffed\022\uffed\023\uffed\024\uffed\001" +
    "\002\000\014\005\053\012\032\013\036\014\034\015\040" +
    "\001\002\000\010\017\030\023\026\024\025\001\002\000" +
    "\026\010\043\011\041\012\032\013\036\014\034\015\040" +
    "\016\035\017\ufff3\023\ufff3\024\ufff3\001\002\000\010\017" +
    "\ufff1\023\ufff1\024\ufff1\001\002\000\010\017\030\023\026" +
    "\024\025\001\002\000\010\017\ufff0\023\ufff0\024\ufff0\001" +
    "\002\000\010\017\ufff4\023\ufff4\024\ufff4\001\002\000\010" +
    "\017\ufff2\023\ufff2\024\ufff2\001\002\000\010\017\030\023" +
    "\026\024\025\001\002\000\010\017\uffef\023\uffef\024\uffef" +
    "\001\002\000\010\017\ufff6\023\ufff6\024\ufff6\001\002\000" +
    "\010\017\030\023\026\024\025\001\002\000\010\017\ufff5" +
    "\023\ufff5\024\ufff5\001\002\000\040\004\uffea\005\uffea\007" +
    "\uffea\010\uffea\011\uffea\012\032\013\036\014\034\015\040" +
    "\016\uffea\017\uffea\020\uffea\022\uffea\023\uffea\024\uffea\001" +
    "\002\000\040\004\uffeb\005\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\012\032\013\036\014\034\015\040\016\uffeb\017\uffeb\020" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\001\002\000\014\012\032" +
    "\013\036\014\034\015\040\022\047\001\002\000\010\017" +
    "\030\023\026\024\025\001\002\000\014\012\032\013\036" +
    "\014\034\015\040\020\051\001\002\000\010\017\030\023" +
    "\026\024\025\001\002\000\040\004\uffec\005\uffec\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016" +
    "\uffec\017\uffec\020\uffec\022\uffec\023\uffec\024\uffec\001\002" +
    "\000\006\002\ufffb\021\ufffb\001\002\000\010\017\030\023" +
    "\026\024\025\001\002\000\016\004\ufff8\007\ufff8\012\032" +
    "\013\036\014\034\015\040\001\002\000\006\004\057\007" +
    "\060\001\002\000\010\017\030\023\026\024\025\001\002" +
    "\000\040\004\uffe9\005\uffe9\007\uffe9\010\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\022\uffe9\023\uffe9\024\uffe9\001\002\000\016\004\ufff7\007" +
    "\ufff7\012\032\013\036\014\034\015\040\001\002\000\004" +
    "\023\021\001\002\000\004\007\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\061\000\010\005\006\006\003\007\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\010\007\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\015\006\003\007\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\036\004\041\001\001\000\004\012\030\001\001\000" +
    "\010\002\036\003\032\004\041\001\001\000\002\001\001" +
    "\000\004\012\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\043\001\001\000" +
    "\002\001\001\000\006\002\036\004\041\001\001\000\006" +
    "\002\036\004\041\001\001\000\006\002\036\004\041\001" +
    "\001\000\004\012\047\001\001\000\006\002\036\004\041" +
    "\001\001\000\004\012\051\001\001\000\006\002\036\004" +
    "\041\001\001\000\002\001\001\000\006\011\055\012\054" +
    "\001\001\000\006\002\036\004\041\001\001\000\002\001" +
    "\001\000\004\012\060\001\001\000\002\001\001\000\006" +
    "\002\036\004\041\001\001\000\004\010\062\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= P EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PDef start_val = (PDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // P ::= IDENTIFIER ASSIGNMENT INTEGER SEMICOLON P 
            {
              PDef RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int integerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token integer = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PDef p = (PDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PDef(id, integer, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= I 
            {
              PDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IDef i = (IDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PDef(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // P ::= 
            {
              PDef RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // I ::= D I 
            {
              IDef RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Define d = (Define)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IDef i = (IDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IDef(d,i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // I ::= D 
            {
              IDef RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Define d = (Define)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IDef(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // D ::= DEF IDENTIFIER LEFTPAREN ARGS RIGHTPAREN ASSIGNMENT E SEMICOLON 
            {
              Define RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token lp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArgsDef args = (ArgsDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token rp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		EDef e = (EDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT  = new Define(d, id, lp, args, rp, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ARGS ::= IDENTIFIER COMMA ARGS 
            {
              ArgsDef RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArgsDef args = (ArgsDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArgsDef(id,c,args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ARGS ::= IDENTIFIER 
            {
              ArgsDef RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArgsDef(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SEQ ::= E 
            {
              SeqDef RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EDef e = (EDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SeqDef(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SEQ",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SEQ ::= SEQ COMMA E 
            {
              SeqDef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SeqDef s = (SeqDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EDef e = (EDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SeqDef(s,c,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SEQ",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // opRel ::= LESSTHAN 
            {
              OpRelDef RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpRelDef(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // opRel ::= MORETHAN 
            {
              OpRelDef RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpRelDef(m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // opRel ::= ASSIGNMENT 
            {
              OpRelDef RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpRelDef(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // opRel ::= 
            {
              OpRelDef RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // opS ::= PLUS 
            {
              OpSDef RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpSDef(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opS",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // opS ::= MINUS 
            {
              OpSDef RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpSDef(m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opS",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // opM ::= MULT 
            {
              OpMDef RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpMDef(m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opM",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // opM ::= DIV 
            {
              OpMDef RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpMDef(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opM",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= INTEGER 
            {
              EDef RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token in = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EDef(in); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= IDENTIFIER 
            {
              EDef RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EDef(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E ::= IF E opRel E THEN E ELSE E 
            {
              EDef RESULT =null;
		int ifeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iferight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Token ife = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		EDef e1 = (EDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		OpRelDef opr = (OpRelDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		EDef e2 = (EDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int thleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int thright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token th = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		EDef e3 = (EDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token el = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EDef e4 = (EDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EDef(ife,e1,opr,e2,th,e3,el,e4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E ::= E opS E 
            {
              EDef RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		EDef e1 = (EDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpSDef ops = (OpSDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EDef e2 = (EDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EDef(e1,ops,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E ::= E opM E 
            {
              EDef RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		EDef e1 = (EDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpMDef opm = (OpMDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		EDef e2 = (EDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EDef(e1,opm,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= IDENTIFIER LEFTPAREN SEQ RIGHTPAREN 
            {
              EDef RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token lp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SeqDef seq = (SeqDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token rp = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EDef(id,lp,seq,rp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
